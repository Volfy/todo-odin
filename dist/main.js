(()=>{"use strict";const e=(()=>{const e=(()=>{let e=document.querySelector("table tbody");return{refreshAll:t=>{(()=>{const t=document.createElement("tbody");e.parentNode.replaceChild(t,e),e=t})(),t.forEach((t=>{(({id:t,title:o,dueDate:r,projectName:c})=>{((t,o,r,c)=>{const n=e.insertRow();n.dataset.num=t;const d=n.insertCell(0),l=document.createElement("input");l.type="checkbox",l.addEventListener("change",(()=>{(e=>{document.querySelector(`tr[data-num='${e}']`).classList.toggle("done")})(t)})),d.append(l),n.insertCell(1).textContent=o,n.insertCell(2).textContent=r,n.insertCell(3).textContent=c;const a=n.insertCell(4),s=document.createElement("button");s.dataset.num=t,s.classList.add("edit"),s.textContent="Edit",a.append(s);const u=n.insertCell(5),p=document.createElement("button");p.dataset.num=t,p.classList.add("rmv"),p.textContent="Remove",u.append(p)})(t,o,r,c)})(t)}))}}})(),t=e=>{document.querySelector("#view-all .project-no").textContent=e},o=(()=>{const e=document.querySelector(".projects-list");return{add:(t,o,c=0)=>{const n=document.createElement("li"),d=document.createElement("button"),l=document.createElement("div");n.id=`project-${t}`,r.addProject(t,o),l.classList.add("project-no"),d.classList.add("project"),n.classList.add("project"),l.textContent=c,d.textContent=o,d.append(l),n.append(d),e.append(n)},remove:e=>{document.querySelector(`#project-${e}`).remove(),r.removeProject(e)},update:(e,t)=>{document.querySelector(`#project-${e} .project-no`).textContent=t},updateViewAll:t}})(),r=(()=>{const e=document.querySelector("#td-project-input");return{addProject:(t,o)=>{const r=document.createElement("option");r.value=`project-${t}`,r.textContent=o,e.append(r)},removeProject:e=>{document.querySelector(`option[value='project-${e}']`).remove()}}})();return{todo:e,updateViewAll:t,project:o,form:r}})();e.project.add(1,"Jogn1",1e3),e.project.add(2,"Jogn2",1e3),e.project.add(3,"Jogn3",1e3),e.project.add(4,"Jogn4",1e3),e.project.add(5,"Jogn5",1e3),e.project.add(6,"Jogn6",1e3),e.project.add(7,"nonumber"),e.project.add(8,"blablabla"),e.project.remove(5),e.project.remove(1),e.project.update(6,22),e.project.update(3,2e3),e.updateViewAll(22);const t=(e,t,o,r,c)=>({id:e,title:t,dueDate:o,projectName:r,priority:c});let o=[t(1,"hello","0/09/2020","godoe",5),t(2,"hello2","0/09/2020","godoe",5),t(3,"hello3","0/09/2020","godoe",5),t(4,"hello4","0/09/233020","go4doe",2),t(5,"hello5","0/09/2020","godoe",1)];e.todo.refreshAll(o);const r=document.querySelector(".add-new-button"),c=document.querySelector(".form-section"),n=document.querySelector(".add-todo"),d=document.querySelector("#to-do-tab"),l=document.querySelector(".add-project"),a=document.querySelector("#project-tab"),s=document.querySelector("#close-tab");r.addEventListener("click",(()=>{c.classList.toggle("form-open"),n.classList.add("current")})),d.addEventListener("click",(()=>{l.classList.remove("current"),n.classList.add("current")})),a.addEventListener("click",(()=>{n.classList.remove("current"),l.classList.add("current")})),s.addEventListener("click",(()=>{l.classList.remove("current"),n.classList.remove("current"),c.classList.remove("form-open")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,