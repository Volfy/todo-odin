(()=>{"use strict";const e=(()=>{let e=[],t=0,o=0;const r=e=>{e.sort(((e,t)=>e.priority-t.priority))};return{project:{add:(t,d)=>{e.push({id:o,name:t,priority:d,todoList:[]}),o++,r(e)},edit:(t,o,d)=>{let n=e.filter((e=>e.id===t))[0];n.name=o,n.priority=d,r(e)},forDOM:()=>{let t=[];return e.forEach((e=>{t.push({id:e.id,name:e.name,tasks:e.todoList.length})})),t},remove:t=>{const o=e.indexOf(e.filter((e=>e.id===t))[0]);e.splice(o,1)},getIdOf:t=>e.filter((e=>e.name==t)).id},todo:(()=>{const o=t=>{let o=e.indexOf(e.filter((e=>e.id==parseInt(t)))[0]);return e[o].todoList},d=t=>{if(-2===t)return n();const r=o(t);let d=[];return r.forEach((o=>{console.log(t),d.push({id:o.id,title:o.title,dueDate:o.dueDate,projectName:e.filter((e=>e.id===t))[0].name,done:21==o.priority,projectId:t})})),d},n=()=>{let t=[];return e.forEach((e=>t.push(d(e.id)))),console.log(t.flat(1)),t.flat(1)};return{add:(e,d,n,c)=>{let l=o(e);l.push({id:t,title:d,dueDate:n,priority:c}),t++,r(l)},edit:(e,t,d,n,c)=>{let l=o(e),a=l.filter((e=>e.id===t))[0];a.title=d,a.dueDate=n,a.priority=c,r(l)},remove:(e,t)=>{let r=o(e);const d=r.indexOf(r.filter((e=>e.id===t))[0]);r.splice(d,1)},forDOM:d}})()}})(),t=(()=>{const t=(()=>{let t=document.querySelector("table tbody");const o=e=>{d(),e.forEach((e=>{(({id:e,title:t,dueDate:o,projectName:r,done:d,projectId:c})=>{n(e,t,o,r,d,c)})(e)}))},r=e=>document.querySelector(`tr[data-num='${e}']`).classList.toggle("done"),d=()=>{const e=document.createElement("tbody");t.parentNode.replaceChild(e,t),t=e},n=(d,n,c,l,a,s)=>{const i=t.insertRow();i.dataset.num=d,console.log(d),console.log(n),console.log(c),console.log(l),console.log(a),console.log(s);const u=i.insertCell(0),p=document.createElement("input");p.type="checkbox",a&&(p.checked=!0,r(d)),p.addEventListener("change",(()=>{r(d)})),u.append(p),i.insertCell(1).textContent=n,i.insertCell(2).textContent=c,i.insertCell(3).textContent=l;const m=i.insertCell(4),f=document.createElement("button");f.dataset.num=d,f.classList.add("edit"),f.textContent="Edit",m.append(f);const h=i.insertCell(5),j=document.createElement("button");j.dataset.num=d,j.dataset.projectId=s,j.classList.add("rmv"),j.textContent="Remove",j.addEventListener("click",(()=>{e.todo.remove(s,d),o(e.todo.forDOM(-2))})),h.append(j)};return{refreshAll:o}})(),o=(()=>{const e=document.querySelector(".projects-list");return{refreshAll:t=>{r.clearProjects(),document.querySelectorAll("li.project").forEach((e=>e.remove())),t.forEach((t=>{(({id:t,name:o,tasks:d})=>{((t,o,d)=>{const n=document.createElement("li"),c=document.createElement("button"),l=document.createElement("div");n.id=`${t}`,r.addProject(t,o),l.classList.add("project-no"),c.classList.add("project"),n.classList.add("project"),l.textContent=d,c.textContent=o,c.append(l),n.append(c),e.append(n)})(t,o,d)})(t)}))}}})(),r=(()=>{const e=document.querySelector(".form-section"),t=document.querySelector("#td-project-input"),o=e=>{const t=document.querySelector(".add-todo"),o=document.querySelector(".add-project");switch(e){case"todo":t.classList.add("current"),o.classList.remove("current");break;case"project":o.classList.add("current"),t.classList.remove("current")}};return{addProject:(e,o)=>{const r=document.createElement("option");r.value=`${e}`,r.textContent=o,t.append(r)},clearProjects:()=>{document.querySelectorAll("option").forEach((e=>e.remove()))},show:()=>{o("todo"),e.classList.toggle("form-open")},switchFormsTo:o}})();return{project:o,todo:t,updateViewAll:e=>{document.querySelector("#view-all .project-no").textContent=e},form:r}})(),o=()=>{t.project.refreshAll(e.project.forDOM()),t.todo.refreshAll(e.todo.forDOM(-2));const o=document.querySelector(".add-project-form"),r=document.querySelector(".add-todo-form"),d=document.querySelector(".add-new-button"),n=document.querySelector("#to-do-tab"),c=document.querySelector("#project-tab"),l=document.querySelector("#close-tab");d.addEventListener("click",t.form.show),l.addEventListener("click",t.form.show),n.addEventListener("click",(()=>{t.form.switchFormsTo("todo")})),c.addEventListener("click",(()=>{t.form.switchFormsTo("project")})),o.addEventListener("submit",(()=>{event.preventDefault(),e.project.add(document.querySelector("#pr-title-input").value,document.querySelector("#pr-priority-input").value),t.project.refreshAll(e.project.forDOM()),t.form.show()})),r.addEventListener("submit",(()=>{event.preventDefault(),e.todo.add(document.querySelector("#td-project-input").value,document.querySelector("#td-title-input").value,document.querySelector("#td-due-date-input").value,document.querySelector("#td-priority-input").value),t.todo.refreshAll(e.todo.forDOM(-2)),t.form.show()}))};e.project.add("hi",1),e.project.add("h2i",1),e.project.add("hi3",3),e.project.add("hi4",2),e.todo.add(1,"lol","date",1),e.todo.add(1,"lo2l","date",1),e.todo.add(3,"lo3l","date",1),e.todo.add(1,"lo2l","date",2),e.todo.add(3,"lo3l","date",2),e.todo.add(2,"lo3l","date",4),e.project.edit(1,"noo",1),o()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,