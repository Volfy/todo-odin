(()=>{"use strict";(()=>{(()=>{let t=document.querySelector("table tbody")})(),(()=>{const t=document.querySelector(".projects-list")})();const t=(()=>{const t=document.querySelector(".form-section"),o=document.querySelector("#td-project-input"),e=t=>{const o=document.querySelector(".add-todo"),e=document.querySelector(".add-project");switch(t){case"todo":o.classList.add("current"),e.classList.remove("current");break;case"project":e.classList.add("current"),o.classList.remove("current")}};return{addProject:(t,e)=>{const d=document.createElement("option");d.value=`project-${t}`,d.textContent=e,o.append(d)},show:()=>{e("todo"),t.classList.toggle("form-open")},switchFormsTo:e}})()})();const t=(()=>{let t=[];const o=t=>{t.sort(((t,o)=>t.priority-o.priority))};return{project:{add:(e,d,r)=>{t.push({id:e,name:d,priority:r,todoList:[]}),o(t)},forDOM:()=>{let o=[];return t.forEach((t=>{o.push({id:t.id,name:t.name,tasks:t.todoList.length})})),o},remove:o=>{const e=t.indexOf(t.filter((t=>t.id===o))[0]);t.splice(e,1)}},todo:(()=>{const e=o=>{const e=t.indexOf(t.filter((t=>t.id===o))[0]);return t[e].todoList},d=o=>{const d=e(o);let r=[];return d.forEach((e=>{r.push({id:e.id,title:e.title,dueDate:e.dueDate,projectName:t.filter((t=>t.id===o))[0].name,done:21===e.priority})})),r};return{add:(t,d,r,c,l)=>{let s=e(t);s.push({id:d,title:r,dueDate:c,priority:l}),o(s)},remove:(t,o)=>{const d=e(t),r=d.indexOf(d.filter((t=>t.id===o))[0]);d.splice(r,1)},forDOM:d,allForDOM:()=>{let o=[];return t.forEach((t=>o.push(d(t.id)))),o.flat(1)}}})()}})();t.project.add(1,"hi",1),t.project.add(2,"h2i",1),t.project.add(3,"hi3",3),t.project.add(4,"hi4",2),t.todo.add(1,1,"lol","date",1),t.todo.add(1,2,"lo2l","date",1),t.todo.add(3,3,"lo3l","date",1),t.todo.add(1,4,"lo2l","date",2),t.todo.add(3,5,"lo3l","date",2),t.todo.add(2,6,"lo3l","date",4),console.log(t.todo.allForDOM()),console.log(t.project.forDOM()),console.log(t.todo.forDOM(1))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,