(()=>{"use strict";const e=(()=>{let e=[],t=0,o=0;const r=e=>{e.sort(((e,t)=>e.priority-t.priority))};return{project:{add:(t,d)=>{e.push({id:o,name:t,priority:d,todoList:[]}),o++,r(e)},edit:(t,o,d)=>{let n=e.filter((e=>e.id===t))[0];n.name=o,n.priority=d,r(e)},forDOM:()=>{let t=[];return e.forEach((e=>{t.push({id:e.id,name:e.name,tasks:e.todoList.filter((e=>21!=e.priority)).length})})),t},remove:t=>{const o=e.indexOf(e.filter((e=>e.id===t))[0]);e.splice(o,1)},getIdOf:t=>e.filter((e=>e.name==t)).id,getCount:()=>e.length},todo:(()=>{const o=t=>{let o=e.indexOf(e.filter((e=>e.id==parseInt(t)))[0]);return e[o].todoList},d=t=>{if(-2===t)return n();const r=o(t);let d=[];return r.forEach((o=>{d.push({id:o.id,title:o.title,dueDate:o.dueDate,projectName:e.filter((e=>e.id===t))[0].name,done:21==o.priority,projectId:t})})),d},n=()=>{let t=[];return e.forEach((e=>t.push(d(e.id)))),t.flat(1)};return{add:(e,d,n,c)=>{let l=o(e);l.push({id:t,title:d,dueDate:n,priority:c}),t++,r(l)},edit:(e,t,d,n,c)=>{let l=o(e),i=l.filter((e=>e.id===t))[0];i.title=d,i.dueDate=n,i.priority=c,r(l)},remove:(e,t)=>{let r=o(e);const d=r.indexOf(r.filter((e=>e.id===t))[0]);r.splice(d,1)},forDOM:d}})()}})(),t=(()=>{const t=(()=>{let t=document.querySelector("table tbody");const n=t=>{l(),t.forEach((e=>{(({id:e,title:t,dueDate:o,projectName:r,done:d,projectId:n})=>{i(e,t,o,r,d,n)})(e)})),o(e.todo.forDOM(-2).filter((e=>!e.done)).length)},c=e=>document.querySelector(`tr[data-num='${e}']`).classList.toggle("done"),l=()=>{const e=document.createElement("tbody");t.parentNode.replaceChild(e,t),t=e},i=(o,l,i,s,u,a)=>{const p=t.insertRow();p.dataset.num=o;const m=p.insertCell(0),f=document.createElement("input");f.type="checkbox",u&&(f.checked=!0,c(o)),f.addEventListener("change",(()=>{!1===u?(u=!0,c(o),e.todo.edit(a,o,l,i,21),n(e.todo.forDOM(-2)),r.refreshAll(e.project.forDOM())):(u=!1,c(o),e.todo.edit(a,o,l,i,1),n(e.todo.forDOM(-2)),r.refreshAll(e.project.forDOM()))})),m.append(f),p.insertCell(1).textContent=l,p.insertCell(2).textContent=i,p.insertCell(3).textContent=s;const y=p.insertCell(4),h=document.createElement("button");h.dataset.num=o,h.classList.add("edit"),h.textContent="Edit",h.addEventListener("click",(()=>{d.showPrefill(l,a,i,1),e.todo.remove(a,o),n(e.todo.forDOM(-2)),r.refreshAll(e.project.forDOM())})),y.append(h);const v=p.insertCell(5),j=document.createElement("button");j.dataset.num=o,j.dataset.projectId=a,j.classList.add("rmv"),j.textContent="Remove",j.addEventListener("click",(()=>{e.todo.remove(a,o),n(e.todo.forDOM(-2)),r.refreshAll(e.project.forDOM())})),v.append(j)};return{refreshAll:n}})(),o=e=>{document.querySelector("#view-all .project-no").textContent=e},r=(()=>{const o=document.querySelector(".projects-list");return{refreshAll:r=>{d.clearProjects(),document.querySelectorAll("li.project").forEach((e=>e.remove())),r.forEach((r=>{(({id:r,name:n,tasks:c})=>{((r,n,c)=>{const l=document.createElement("li"),i=document.createElement("button"),s=document.createElement("div");l.id=`${r}`,d.addProject(r,n),i.addEventListener("click",(()=>t.refreshAll(e.todo.forDOM(r)))),s.classList.add("project-no"),i.classList.add("project"),l.classList.add("project"),s.textContent=c,i.textContent=n,i.append(s),l.append(i),o.append(l)})(r,n,c)})(r)}))}}})(),d=(()=>{const e=document.querySelector(".form-section"),t=document.querySelector("#td-project-input"),o=e=>{const t=document.querySelector(".add-todo"),o=document.querySelector(".add-project");switch(e){case"todo":t.classList.add("current"),o.classList.remove("current");break;case"project":o.classList.add("current"),t.classList.remove("current")}};return{addProject:(e,o)=>{const r=document.createElement("option");r.value=`${e}`,r.textContent=o,t.append(r)},clearProjects:()=>{document.querySelectorAll("option").forEach((e=>e.remove()))},show:()=>{o("todo"),e.classList.toggle("form-open")},showPrefill:(t,r,d,n)=>{o("todo"),e.classList.toggle("form-open"),document.querySelector("#td-project-input").value=r,document.querySelector("#td-title-input").value=t,document.querySelector("#td-due-date-input").value=d,document.querySelector("#td-priority-input").value=n},switchFormsTo:o}})();return{project:r,todo:t,updateViewAll:o,form:d}})();(()=>{t.project.refreshAll(e.project.forDOM()),t.todo.refreshAll(e.todo.forDOM(-2));const o=document.querySelector(".add-project-form"),r=document.querySelector(".add-todo-form");document.querySelector("#view-all button").addEventListener("click",(()=>t.todo.refreshAll(e.todo.forDOM(-2))));const d=document.querySelector(".add-new-button"),n=document.querySelector("#to-do-tab"),c=document.querySelector("#project-tab"),l=document.querySelector("#close-tab");d.addEventListener("click",t.form.show),l.addEventListener("click",t.form.show),n.addEventListener("click",(()=>{t.form.switchFormsTo("todo")})),c.addEventListener("click",(()=>{t.form.switchFormsTo("project")}));const i=document.querySelector(".warning-no-projects");o.addEventListener("submit",(()=>{event.preventDefault(),e.project.add(document.querySelector("#pr-title-input").value,document.querySelector("#pr-priority-input").value),t.todo.refreshAll(e.todo.forDOM(-2)),t.project.refreshAll(e.project.forDOM()),t.form.show(),i.style.display="none"})),r.addEventListener("submit",(()=>{event.preventDefault(),0!=e.project.getCount()?(e.todo.add(document.querySelector("#td-project-input").value,document.querySelector("#td-title-input").value,document.querySelector("#td-due-date-input").value,document.querySelector("#td-priority-input").value),t.todo.refreshAll(e.todo.forDOM(-2)),t.project.refreshAll(e.project.forDOM()),t.form.show()):i.style.display="block"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,