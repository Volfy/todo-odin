(()=>{"use strict";(()=>{(()=>{let t=document.querySelector("table tbody")})(),(()=>{const t=document.querySelector(".projects-list")})();const t=(()=>{const t=document.querySelector(".form-section"),e=document.querySelector("#td-project-input"),o=t=>{const e=document.querySelector(".add-todo"),o=document.querySelector(".add-project");switch(t){case"todo":e.classList.add("current"),o.classList.remove("current");break;case"project":o.classList.add("current"),e.classList.remove("current")}};return{addProject:(t,o)=>{const d=document.createElement("option");d.value=`project-${t}`,d.textContent=o,e.append(d)},show:()=>{o("todo"),t.classList.toggle("form-open")},switchFormsTo:o}})()})();const t=(()=>{let t=[],e=0,o=0;const d=t=>{t.sort(((t,e)=>t.priority-e.priority))};return{project:{add:(e,r)=>{t.push({id:o,name:e,priority:r,todoList:[]}),o++,d(t)},edit:(e,o,r)=>{let c=t.filter((t=>t.id===e))[0];c.name=o,c.priority=r,d(t)},forDOM:()=>{let e=[];return t.forEach((t=>{e.push({id:t.id,name:t.name,tasks:t.todoList.length})})),e},remove:e=>{const o=t.indexOf(t.filter((t=>t.id===e))[0]);t.splice(o,1)}},todo:(()=>{const o=e=>{const o=t.indexOf(t.filter((t=>t.id===e))[0]);return t[o].todoList},r=e=>{const d=o(e);let r=[];return d.forEach((o=>{r.push({id:o.id,title:o.title,dueDate:o.dueDate,projectName:t.filter((t=>t.id===e))[0].name,done:21===o.priority})})),r};return{add:(t,r,c,i)=>{let l=o(t);l.push({id:e,title:r,dueDate:c,priority:i}),e++,d(l)},edit:(t,e,r,c,i)=>{const l=o(t);let s=l.filter((t=>t.id===e))[0];s.title=r,s.dueDate=c,s.priority=i,d(l)},remove:(t,e)=>{const d=o(t),r=d.indexOf(d.filter((t=>t.id===e))[0]);d.splice(r,1)},forDOM:r,allForDOM:()=>{let e=[];return t.forEach((t=>e.push(r(t.id)))),e.flat(1)}}})()}})();t.project.add("hi",1),t.project.add("h2i",1),t.project.add("hi3",3),t.project.add("hi4",2),t.todo.add(1,"lol","date",1),t.todo.add(1,"lo2l","date",1),t.todo.add(3,"lo3l","date",1),t.todo.add(1,"lo2l","date",2),t.todo.add(3,"lo3l","date",2),t.todo.add(2,"lo3l","date",4),t.project.edit(1,"noo",1),t.todo.edit(1,0,"chjage","due",1),console.log(t.todo.allForDOM()),console.log(t.project.forDOM()),console.log(t.todo.forDOM(1))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,