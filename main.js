(()=>{"use strict";const e=(()=>{const e=(()=>{let e=document.querySelector("table tbody");const t=()=>{const t=document.createElement("tbody");e.parentNode.replaceChild(t,e),e=t},o=e=>{document.querySelector(`tr[data-num='${e}']`).remove()};return{clearAll:t,refreshAll:r=>{t(),r.forEach((t=>{(({id:t,title:r,dueDate:c,projectName:n})=>{((t,r,c,n)=>{const d=e.insertRow();d.dataset.num=t;const l=d.insertCell(0),a=document.createElement("input");a.type="checkbox",a.dataset.num=t,l.append(a),d.insertCell(1).textContent=r,d.insertCell(2).textContent=c,d.insertCell(3).textContent=n;const s=d.insertCell(4),u=document.createElement("button");u.dataset.num=t,u.classList.add("edit"),u.textContent="Edit",s.append(u);const m=d.insertCell(5),p=document.createElement("button");p.dataset.num=t,p.classList.add("rmv"),p.textContent="Remove",p.addEventListener("click",(()=>o(t))),m.append(p)})(t,r,c,n)})(t)}))},remove:o}})(),t=e=>{document.querySelector("#view-all .project-no").textContent=e},o=(()=>{const e=document.querySelector(".projects-list");return{add:(t,o,c=0)=>{const n=document.createElement("li"),d=document.createElement("button"),l=document.createElement("div");n.id=`project-${t}`,r.addProject(t,o),l.classList.add("project-no"),d.classList.add("project"),n.classList.add("project"),l.textContent=c,d.textContent=o,d.append(l),n.append(d),e.append(n)},remove:e=>{document.querySelector(`#project-${e}`).remove(),r.removeProject(e)},update:(e,t)=>{document.querySelector(`#project-${e} .project-no`).textContent=t},updateViewAll:t}})(),r=(()=>{const e=document.querySelector("#td-project-input");return{addProject:(t,o)=>{const r=document.createElement("option");r.value=`project-${t}`,r.textContent=o,e.append(r)},removeProject:e=>{document.querySelector(`option[value='project-${e}']`).remove()}}})();return{todo:e,updateViewAll:t,project:o,form:r}})();e.project.add(1,"Jogn1",1e3),e.project.add(2,"Jogn2",1e3),e.project.add(3,"Jogn3",1e3),e.project.add(4,"Jogn4",1e3),e.project.add(5,"Jogn5",1e3),e.project.add(6,"Jogn6",1e3),e.project.add(7,"nonumber"),e.project.add(8,"blablabla"),e.project.remove(5),e.project.remove(1),e.project.update(6,22),e.project.update(3,2e3),e.updateViewAll(22);const t=(e,t,o,r)=>({id:e,title:t,dueDate:o,projectName:r});let o=[t(1,"hello","0/09/2020","godoe"),t(2,"hello2","0/09/2020","godoe"),t(3,"hello3","0/09/2020","godoe"),t(4,"hello4","0/09/233020","go4doe"),t(5,"hello5","0/09/2020","godoe")];e.todo.refreshAll(o),e.todo.remove(3),e.todo.clearAll();const r=document.querySelector(".add-new-button"),c=document.querySelector(".form-section"),n=document.querySelector(".add-todo"),d=document.querySelector("#to-do-tab"),l=document.querySelector(".add-project"),a=document.querySelector("#project-tab"),s=document.querySelector("#close-tab");document.querySelectorAll("tr input").forEach((e=>{e.addEventListener("change",(()=>document.querySelector(`tr[data-num='${e.dataset.num}']`).classList.toggle("done")))})),r.addEventListener("click",(()=>{c.classList.toggle("form-open"),n.classList.add("current")})),d.addEventListener("click",(()=>{l.classList.remove("current"),n.classList.add("current")})),a.addEventListener("click",(()=>{n.classList.remove("current"),l.classList.add("current")})),s.addEventListener("click",(()=>{l.classList.remove("current"),n.classList.remove("current"),c.classList.remove("form-open")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,